# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto; # some last versions calculate it automatically
# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;
# only log critical errors
error_log /var/log/nginx/error.log crit;
# remove next line if you don't use nginx-unprivileged docker image
pid /tmp/nginx.pid;
# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 10000;
    # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;
    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}

http {
    # remove next /tmp/ related lines if you don't use nginx-unprivileged docker image
    proxy_temp_path /tmp/proxy_temp;
    client_body_temp_path /tmp/client_temp;
    fastcgi_temp_path /tmp/fastcgi_temp;
    uwsgi_temp_path /tmp/uwsgi_temp;
    scgi_temp_path /tmp/scgi_temp;
    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    # to boost I/O on HDD we can disable access logs
    access_log off;
    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;
    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;
    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;
    # reduce the data that needs to be sent over network
    gzip on;
    gzip_static on;
    gzip_min_length 1000;
    gzip_comp_level 2;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;
    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;
    # request timed out -- default 60
    client_body_timeout 10;
    # if client stop responding, free up memory -- default 60
    send_timeout 10;
    # server will close connection after this time -- default 75
    keepalive_timeout 15;
    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;
    # hide nginx version
    server_tokens off;
    # limit the number of connections per single IP
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    # limit the number of requests for a given session
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;
    # zone which we want to limit by upper values, we want limit whole server
    server {
        limit_conn conn_limit_per_ip 10;
        limit_req zone=req_limit_per_ip burst=10 nodelay;
    }
    # if the request body size is more than the buffer size, then the entire (or partial)
    # request body is written into a temporary file
    client_body_buffer_size  10k;
    # maximum allowed size of the client request body specified in the “Content-Length” request header field
    # if the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client
    client_max_body_size 8m;
    # buffer size for reading client request header
    client_header_buffer_size 1k;
    # maximum number and size of buffers for large headers to read from client request
    large_client_header_buffers 2 1k;
    # how long to wait for the client to send a request header
    client_header_timeout 12;
    # expires map
    map $sent_http_content_type $expires {
        default                    off;
        text/html                  epoch;
        text/css                   max;
        application/javascript     max;
        ~image/                    max;
    }
    # include default nginx mime types
    include /etc/nginx/mime.types;
    # apply common settings to all sites, useless in container
    # include /etc/nginx/conf.d/*.conf;

    # ---------------------------------------------------------------------------- #
    #                               YOUR SERVER CONF                               #
    # ---------------------------------------------------------------------------- #

    server {
        listen $PORT;
        listen [::]:$PORT;
        server_name localhost;
        root /usr/share/nginx/html;

        # your web app, redirect to /en-US or /fr according end user browser language
        set $first_language $http_accept_language;
        if ($http_accept_language ~* '^(.+?),') {
            set $first_language $1;
        }
        set $language_suffix 'en-US';
        if ($first_language ~* 'fr') {
            set $language_suffix 'fr';
        }
        location / {
            rewrite ^/$ $uri$language_suffix/index.html permanent;
        }
        location /en-US/ {
            alias /usr/share/nginx/html/en-US/;
            try_files $uri$args $uri$args/ /en-US/index.html;
        }
        location /fr/ {
            alias /usr/share/nginx/html/fr/;
            try_files $uri$args $uri$args/ /fr/index.html;
        }

        location /robots.txt {
            return 200 "User-agent: *\nAllow: /";
        }
    }
}
